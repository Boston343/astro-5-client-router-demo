---
interface Props {
  title: string;
  triggerText: string;
}

const { title, triggerText } = Astro.props;
---

<div class="dialog-wrapper">
  <button
    type="button"
    class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded shadow-md transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
    aria-haspopup="dialog"
    aria-expanded="false"
    data-trigger
  >
    {triggerText}
  </button>

  <dialog
    class:list={[
      "rounded-lg p-6 backdrop:bg-black/50",
      "animate-fade-in backdrop:animate-fade-in",
    ]}
    aria-labelledby="dialog-title"
  >
    <div class="flex flex-col gap-4">
      <header class="flex items-center justify-between">
        <h2 id="dialog-title" class="text-xl font-semibold">
          {title}
        </h2>
        <button
          type="button"
          class:list={[
            "close-button",
            "rounded-full p-1 hover:bg-gray-100 transition-colors",
          ]}
          aria-label="Close dialog"
          data-close
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <path d="M18 6 6 18"></path>
            <path d="m6 6 12 12"></path>
          </svg>
        </button>
      </header>
      <div class="dialog-content">
        <slot />
      </div>
    </div>
  </dialog>
</div>

<style>
  dialog::backdrop {
    background: rgba(0, 0, 0, 0.5);
  }
  
  dialog[open] {
    animation: slide-in 150ms ease-out;
  }
  
  @keyframes slide-in {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  class DialogHandler {
    dialog: HTMLDialogElement;
    trigger: HTMLButtonElement;
    closeButton: HTMLButtonElement;

    constructor(wrapper: HTMLElement) {
      this.dialog = wrapper.querySelector('dialog')!;
      this.trigger = wrapper.querySelector('[data-trigger]')!;
      this.closeButton = wrapper.querySelector('[data-close]')!;

      if (!this.dialog || !this.trigger || !this.closeButton) {
        return;
      }

      console.log('dialog element found');
      this.setupEventListeners();
    }

    private setupEventListeners() {
      this.trigger.addEventListener('click', () => this.openDialog());
      this.closeButton.addEventListener('click', () => this.closeDialog());
      
      // Close on click outside
      this.dialog.addEventListener('click', (e) => {
        if (e.target === this.dialog) {
          this.closeDialog();
        }
      });

      // Handle Escape key
      this.dialog.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeDialog();
        }
      });
    }

    private openDialog() {
      this.dialog.showModal();
      this.trigger.setAttribute('aria-expanded', 'true');
      
      // Focus the close button when dialog opens
      this.closeButton.focus();
    }

    private closeDialog() {
      this.dialog.close();
      this.trigger.setAttribute('aria-expanded', 'false');
      
      // Return focus to trigger button
      this.trigger.focus();
    }
  }

const dialogSetup = () => {
  console.log('dialogSetup');
 // Initialize all dialogs on the page
 document.querySelectorAll('.dialog-wrapper').forEach((wrapper) => {
    new DialogHandler(wrapper as HTMLElement);
  });
}

dialogSetup();

// Re-run dialog setup on navigation
document.addEventListener('astro:after-swap', dialogSetup);
 
</script>